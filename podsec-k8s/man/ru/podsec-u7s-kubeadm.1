.\" generated with Ronn-NG/v0.9.1
.\" http://github.com/apjanke/ronn-ng/tree/0.9.1
.TH "PODSEC\-U7S\-KUBEADM" "1" "October 2024" ""
.SH "NAME"
\fBpodsec\-u7s\-kubeadm\fR \- инициализация master\- или worker\-узла в rootless\-kubernetes (alt usernetes)
.SH "SYNOPSIS"
\fBpodsec\-u7s\-kubeadm init| join <ApiServer>:6443 \-\-token \|\.\|\.\|\. \-\-discovery\-token\-ca\-cert\-hash \|\.\|\.\|\.\fR
.SH "DESCRIPTION"
.SH "Установка master\-узла"
.IP "1." 4
Измените переменную PATH:
.IP "" 0
.IP "" 4
.nf
export PATH=/usr/libexec/podsec/u7s/bin/:$PATH
.fi
.IP "" 0
.IP "1." 4
Запустите команду:
.IP "" 0
.IP "" 4
.nf
# kubeadm init
.fi
.IP "" 0
.IP "" 4
По умолчанию уровень отладки устанавливается в \fB0\fR\. Если необходимо увеличить уровень отладки укажите перед подкомандой \fBinit\fR флаг \fB\-v n\fR\. Где \fBn\fR принимает значения от \fB0\fR до \fB9\fR\-ти\.
.IP "" 0
.P
После:
.IP "\[ci]" 4
генерации сертификатов в каталоге \fB/etc/kuarnetes/pki\fR,
.IP "\[ci]" 4
загрузки образов, \-генерации conf\-файлов в каталоге \fB/etc/kubernetes/manifests/\fR, \fB/etc/kubernetes/manifests/etcd/\fR
.IP "\[ci]" 4
запуска сервиса \fBkubelet\fR и \fBPod\fR\'ов системных \fBkubernetes\-образов\fR
.IP "" 0
.P
инициализируется \fBkubernet\-кластер\fR из одного узла\.
.P
По окончании скрипт выводит строки подключения \fBmaster\fR(\fBControl Plane\fR) и \fBworker\-узлов\fR:
.IP "" 4
.nf
You can now join any number of control\-plane nodes by copying certificate authorities
and service account keys on each node and then running the following as root:

kubeadm join xxx\.xxx\.xxx\.xxx:6443 \-\-token \|\.\|\.\|\. \-\-discovery\-token\-ca\-cert\-hash sha256:\.\. \-\-control\-plane

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join xxx\.xxx\.xxx\.xxx:6443 \-\-token \|\.\|\.\|\. \-\-discovery\-token\-ca\-cert\-hash sha256:\|\.\|\.\|\.
.fi
.IP "" 0
.IP "1." 4
После завершения скрипта проверьте работу \fBusernetes\fR (\fBrootless kuber\fR)
.IP "" 0
.IP "" 4
.nf
# kubectl get nodes \-o wide
NAME       STATUS   ROLES           AGE   VERSION   INTERNAL\-IP   EXTERNAL\-IP   OS\-IMAGE           KERNEL\-VERSION         CONTAINER\-RUNTIME
<host>     Ready    control\-plane   16m   v1\.26\.3   10\.96\.0\.1     \fInone\fR        ALT SP Server 11100\-01   5\.15\.105\-un\-def\-alt1   cri\-o://1\.26\.2
.fi
.IP "" 0
.P
Проверьте работу \fBusernetes\fR (\fBrootless kuber\fR)
.IP "" 4
.nf
# kubectl get all \-A
NAMESPACE     NAME                                   READY   STATUS    RESTARTS   AGE
kube\-system   pod/coredns\-c7df5cd6c\-5pkkm            1/1     Running   0          19m
kube\-system   pod/coredns\-c7df5cd6c\-cm6vf            1/1     Running   0          19m
kube\-system   pod/etcd\-host\-212                      1/1     Running   0          19m
kube\-system   pod/kube\-apiserver\-host\-212            1/1     Running   0          19m
kube\-system   pod/kube\-controller\-manager\-host\-212   1/1     Running   0          19m
kube\-system   pod/kube\-proxy\-lqf9c                   1/1     Running   0          19m
kube\-system   pod/kube\-scheduler\-host\-212            1/1     Running   0          19m

NAMESPACE     NAME                 TYPE        CLUSTER\-IP   EXTERNAL\-IP   PORT(S)                  AGE
default       service/kubernetes   ClusterIP   10\.96\.0\.1    \fInone\fR        443/TCP                  19m
kube\-system   service/kube\-dns     ClusterIP   10\.96\.0\.10   \fInone\fR        53/UDP,53/TCP,9153/TCP   19m

NAMESPACE     NAME                        DESIRED   CURRENT   READY   UP\-TO\-DATE   AVAILABLE   NODE SELECTOR            AGE
kube\-system   daemonset\.apps/kube\-proxy   1         1         1       1            1           kubernetes\.io/os=linux   19m

NAMESPACE     NAME                      READY   UP\-TO\-DATE   AVAILABLE   AGE
kube\-system   deployment\.apps/coredns   2/2     2            2           19m

NAMESPACE     NAME                                DESIRED   CURRENT   READY   AGE
kube\-system   replicaset\.apps/coredns\-c7df5cd6c   2         2         2       19m
.fi
.IP "" 0
.P
Состояние всех Pod\'ов должны быть в \fB1/1\fR\.
.P
Проверьте состояние дерева процессов:
.IP "" 4
.nf
# pstree
\|\.\|\.\|\.
├─systemd─┬─(sd\-pam)
│         ├─dbus\-daemon
│         ├─nsenter\.sh───nsenter───_kubelet\.sh───kubelet───11*[{kubelet}]
│         └─rootlesskit\.sh───rootlesskit─┬─exe─┬─conmon───kube\-controller───7*[{kube\-controller}]
│                                        │     ├─conmon───kube\-apiserver───8*[{kube\-apiserver}]
│                                        │     ├─conmon───kube\-scheduler───7*[{kube\-scheduler}]
│                                        │     ├─conmon───etcd───8*[{etcd}]
│                                        │     ├─conmon───kube\-proxy───4*[{kube\-proxy}]
│                                        │     ├─2*[conmon───coredns───8*[{coredns}]]
│                                        │     ├─rootlesskit\.sh───crio───10*[{crio}]
│                                        │     └─7*[{exe}]
│                                        ├─slirp4netns
│                                        └─8*[{rootlesskit}]
\|\.\|\.\|\.
.fi
.IP "" 0
.P
Процесс \fBkubelet\fR запускается как сервис в \fBuser namespace\fR процесса \fBrootlesskit\fR\.
.P
Все остальные процессы \fBkube\-controller\fR, \fBkube\-apiserver\fR, \fBkube\-scheduler\fR, \fBkube\-proxy\fR, \fBetcd\fR, \fBcoredns\fR запускаются как контейнеры от соответствующих образов \fBregistry\.local/k8s\-c10f1/kube\-controller\-manager:v1\.26\.3\fR, \fBregistry\.local/k8s\-c10f1/kube\-apiserver:v1\.26\.3\fR, \fBregistry\.local/k8s\-c10f1/kube\-scheduler:v1\.26\.3\fR, \fBregistry\.local/k8s\-c10f1/kube\-proxy:v1\.26\.3\fR, \fBregistry\.local/k8s\-c10f1/etcd:3\.5\.6\-0\fR, \fBregistry\.local/k8s\-c10f1/coredns:v1\.9\.3\fR\.
.IP "1." 4
По умолчанию на master\-узле пользовательские \fBPod\fRы не запускаются\. Чтобы снять это ограничение наберите команду:
.IP "" 0
.P
\fB# kubectl taint nodes <host> node\-role\.kubernetes\.io/control\-plane:NoSchedule\- node/<host> untainted\fR
.IP "1." 4
Проверьте загрузку deployment nginx:
.IP "" 0
.P
\fB# kubectl apply \-f https://k8s\.io/examples/application/deployment\.yaml\fR
.P
После загрузки образов \fBnginx\fR проверьте состояние \fBdeployment\fR и \fBPod\fRов: ``` # kubectl get deployments\.apps,pods NAME READY UP\-TO\-DATE AVAILABLE AGE deployment\.apps/nginx\-deployment 2/2 2 2 5m34s
.P
NAME READY STATUS RESTARTS AGE pod/nginx\-deployment\-85996f8dbd\-2dw9h 1/1 Running 0 5m34s pod/nginx\-deployment\-85996f8dbd\-r5dt4 1/1 Running 0 5m34s ```
.IP "1." 4
Проверьте загрузку образа \fBregistry\.local/alt/alt\fR:
.IP "" 0
.P
\fB# kubectl run \-it \-\-image=registry\.local/alt/alt \-\- bash If you don\'t see a command prompt, try pressing enter\. [root@bash /]# pwd\fR
.SH "Подключение worker\-узла"
.IP "1." 4
Измените переменную PATH:
.IP "" 0
.IP "" 4
.nf
export PATH=/usr/libexec/podsec/u7s/bin/:$PATH
.fi
.IP "" 0
.IP "1." 4
Скопируйте команду подключния \fBworker\-узла\fR, полученную на этапе установки начального \fBmaster\-узла\fR\. Запустите ее:
.IP "" 0
.P
\fBkubeadm join xxx\.xxx\.xxx\.xxx:6443 \-\-token \|\.\|\.\|\. \-\-discovery\-token\-ca\-cert\-hash sha256:\|\.\|\.\|\.\fR
.IP "" 4
По умолчанию уровень отладки устанавливается в \fB0\fR\. Если необходимо увеличить уровень отладки укажите перед подкомандой \fBjoin\fR флаг \fB\-v n\fR\. Где \fBn\fR принимает значения от \fB0\fR до \fB9\fR\-ти\.
.IP "" 0
.P
По окончании скрипт выводит текст:
.IP "" 4
.nf
This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received\.
* The Kubelet was informed of the new secure connection details\.

Run \'kubectl get nodes\' on the control\-plane to see this node join the cluster\.
.fi
.IP "" 0
.IP "1." 4
Проверьте состояние дерева процессов:
.IP "" 0
.IP "" 4
.nf
# pstree
\|\.\|\.\|\.
├─systemd─┬─(sd\-pam)
│         ├─dbus\-daemon
│         ├─nsenter\.sh───nsenter───_kubelet\.sh───kubelet───10*[{kubelet}]
│         └─rootlesskit\.sh───rootlesskit─┬─exe─┬─conmon───kube\-proxy───4*[{kube\-proxy}]
│                                        │     ├─rootlesskit\.sh───crio───9*[{crio}]
│                                        │     └─6*[{exe}]
│                                        ├─slirp4netns
│                                        └─8*[{rootlesskit}]
\|\.\|\.\|\.
.fi
.IP "" 0
.P
Процесс \fBkubelet\fR запускается как сервис в \fBuser namespace\fR процесса \fBrootlesskit\fR\.
.P
Все остальные процессы \fBkube\-proxy\fR, \fBkube\-flannel\fR запускаются как контейнеры от соответствующих образов \fBregistry\.local/k8s\-c10f1/kube\-proxy:v1\.26\.3\fR, \fBregistry\.local/k8s\-c10f1/flannel:v0\.19\.2\fR\.
.P
4 Зайдите на \fBmaster\-узел\fR и проверьте подключение \fBworker\-узла\fR: \fB# kubectl get nodes \-o wide NAME STATUS ROLES AGE VERSION INTERNAL\-IP EXTERNAL\-IP OS\-IMAGE KERNEL\-VERSION CONTAINER\-RUNTIME host\-212 Ready control\-plane 7h54m v1\.26\.3 10\.96\.0\.1 <none> ALT SP Server 11100\-01 5\.15\.105\-un\-def\-alt1 cri\-o://1\.26\.2 host\-226 Ready <none> 8m30s v1\.26\.3 10\.96\.0\.1 <none> ALT SP Server 11100\-01 5\.15\.105\-un\-def\-alt1 cri\-o://1\.26\.2\fR
.IP "1." 4
На \fBmaster\-узле\fR под пользоваталем \fBroot\fR выполните команду:
.IP "" 0
.P
\fB# machinectl shell u7s\-admin@ ~u7s\-admin/usernetes/boot/nsenter\.sh \e kubectl apply \-f ~u7s\-admin/usernetes/manifests/kube\-flannel\.yml Connected to the local host\. Press ^] three times within 1s to exit session\. [INFO] Entering RootlessKit namespaces: OK namespace/kube\-flannel created clusterrole\.rbac\.authorization\.k8s\.io/flannel created clusterrolebinding\.rbac\.authorization\.k8s\.io/flannel created serviceaccount/flannel created configmap/kube\-flannel\-cfg created daemonset\.apps/kube\-flannel\-ds created Connection to the local host terminated\.\fR
.IP "1." 4
На \fBmaster\-узле\fR выполните команду: \fB# kubectl get daemonsets\.apps \-A NAMESPACE NAME DESIRED CURRENT READY UP\-TO\-DATE AVAILABLE NODE SELECTOR AGE kube\-flannel kube\-flannel\-ds 2 2 2 2 1 <none> 102s kube\-system kube\-proxy 2 2 2 2 2 kubernetes\.io/os=linux 8h\fR Число \fBREADY\fR каждого \fBdaemonset\fR должно быть равно числу \fBDESIRED\fR и должно быть равно числу узлов кластера\.
.IP "" 0
.SH "EXAMPLES"
\fBpodsec\-u7s\-kubeadm init\fR \fBpodsec\-u7s\-kubeadm join 102\.168\.122\.32:6443 \-\-token \|\.\|\.\|\. \-\-discovery\-token\-ca\-cert\-hash \|\.\|\.\|\.\fR
.SH "SECURITY CONSIDERATIONS"
.IP "\[ci]" 4
Так как все работа с кластером производится по REST\-интерфейсу, то для обеспечения повышенных мер безопасности следует заводить \fBВСЕХ пользователей\fR, включая \fIадминистратора безопасности средства контейнеризации\fR \fBВНЕ узлов кластера\fR\. Для работы с кластером достаточно команды \fBkubectl\fR, входящую в пакет \fBkubernetes\-client\fR\.
.IP "" 0
.SH "SEE ALSO"
.IP "\[ci]" 4
Kubernetes \fIhttps://www\.altlinux\.org/Kubernetes\fR;
.IP "\[ci]" 4
Usernetes: Kubernetes without the root privileges \fIhttps://github\.com/rootless\-containers/usernetes\fR;
.IP "\[ci]" 4
Настройка аудита API\-сервиса \fIhttps://github\.com/alt\-cloud/podsec/blob/master/k8s/RBAC/addUser/clusterroleBinding\.md\fR;
.IP "" 0
.SH "AUTHOR"
Костарев Алексей, Базальт СПО kaf@basealt\.ru
