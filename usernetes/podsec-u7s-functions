#!/bin/sh
USERNAME='u7s-admin'
export StartTarget="u7s.target"
export CRI="crio"
export CNI="flannel"
export PUBLISH_DEFAULT="0.0.0.0:6443:6443/tcp"
export PUBLISH=
export CIDR="10.0.42.0/24"
export HOMEDIR="/var/lib/${USERNAME}"
export CONFIG_DIR="$HOMEDIR/.config"
export WAIT_INIT_CERTS
export BASE="/var/lib/${USERNAME}/usernetes"

function INFO() {
	echo -e "\e[104m\e[97m[INFO]\e[49m\e[39m $@"
}

function WARNING() {
	echo >&2 -e "\e[101m\e[97m[WARNING]\e[49m\e[39m $@"
}

function ERROR() {
	echo >&2 -e "\e[101m\e[97m[ERROR]\e[49m\e[39m $@"
}

checkSystemEnv() {
  # check cgroup config
  if [[ ! -f /sys/fs/cgroup/cgroup.controllers ]]; then
    ERROR "Needs cgroup v2, see https://rootlesscontaine.rs/getting-started/common/cgroup2/"
    exit 1
  fi

  # check kernel modules
  for f in $(cat ${BASE}/config/modules-load.d/usernetes.conf); do
    if ! grep -qw "^$f" /proc/modules; then
      WARNING "Kernel module $f not loaded"
    fi
  done
}



createU7Environments() {

  ### Create EnvironmentFile (~/.config/usernetes/env)
  mkdir -p ${CONFIG_DIR}/usernetes
  >${CONFIG_DIR}/usernetes/env
  cat <<EOF >>${CONFIG_DIR}/usernetes/env
U7S_ROOTLESSKIT_PORTS=${PUBLISH}
EOF
  if [ "$CNI" = "flannel" ]; then
    cat <<EOF >>${CONFIG_DIR}/usernetes/env
U7S_FLANNEL=1
EOF
  fi
  if [ -n "$CIDR" ]; then
    cat <<EOF >>${CONFIG_DIR}/usernetes/env
U7S_ROOTLESSKIT_FLAGS=--cidr=${CIDR}
EOF
  fi

  if [[ -n "$WAIT_INIT_CERTS" ]]; then
    max_trial=300
    INFO "Waiting for certs to be created.":
    for ((i = 0; i < max_trial; i++)); do
      if [[ -f ${CONFIG_DIR}/usernetes/node/done || -f ${CONFIG_DIR}/usernetes/master/done ]]; then
        echo "OK"
        break
      fi
      echo -n .
      sleep 5
    done
  elif [[ ! -d ${CONFIG_DIR}/usernetes/master ]]; then
    ### If the keys are not generated yet, generate them for the single-node cluster
    INFO "Generating single-node cluster TLS keys (${CONFIG_DIR}/usernetes/{master,node})"
    cfssldir=$(mktemp -d /tmp/cfssl.XXXXXXXXX)
    master=127.0.0.1
    node=$(hostname)
    ${BASE}/common/cfssl.sh --dir=${cfssldir} --master=$master --node=$node,127.0.0.1
    rm -rf ${CONFIG_DIR}/usernetes/{master,node}
    cp -r "${cfssldir}/master" ${CONFIG_DIR}/usernetes/master
    cp -r "${cfssldir}/nodes.$node" ${CONFIG_DIR}/usernetes/node
    rm -rf "${cfssldir}"
  fi

  ### Begin installation
  INFO "Base dir: ${BASE}"
  mkdir -p ${CONFIG_DIR}/systemd/user
  function x() {
    name=$1
    path=${CONFIG_DIR}/systemd/user/${name}
    INFO "Installing $path"
    cat >$path
  }

  service_common="WorkingDirectory=${BASE}
  EnvironmentFile=${CONFIG_DIR}/usernetes/env
  Restart=on-failure
  LimitNOFILE=65536
  "

  ### u7s
  cat <<EOF | x u7s.target
[Unit]
Description=Usernetes target (all components in the single node)
Requires=u7s-master-with-etcd.target u7s-node.target
After=u7s-master-with-etcd.target u7s-node.target

[Install]
WantedBy=multi-user.target
EOF

  cat <<EOF | x u7s-master-with-etcd.target
[Unit]
Description=Usernetes target for Kubernetes master components (including etcd)### node
Requires=u7s-etcd.target u7s-master.target
After=u7s-etcd.target u7s-master.target
PartOf=u7s.target

[Install]
WantedBy=u7s.target
EOF

  ### RootlessKit
cat <<EOF | x u7s-rootlesskit.service
[Unit]
Description=Usernetes RootlessKit service (crio)
PartOf=u7s.target

[Service]
ExecStart=${BASE}/boot/rootlesskit.sh ${BASE}/boot/crio.sh
Delegate=yes
${service_common}
EOF

  ### etcd
  # TODO: support running without RootlessKit
  cat <<EOF | x u7s-etcd.target
[Unit]
Description=Usernetes target for etcd
Requires=u7s-etcd.service
After=u7s-etcd.service
PartOf=u7s-master-with-etcd.target
EOF

  cat <<EOF | x u7s-etcd.service
[Unit]
Description=Usernetes etcd service
BindsTo=u7s-rootlesskit.service
PartOf=u7s-etcd.target

[Service]
Type=notify
NotifyAccess=all
ExecStart=${BASE}/boot/etcd.sh
ExecStartPost=${BASE}/boot/etcd-init-data.sh
${service_common}
EOF

  ### master
  # TODO: support running without RootlessKit
  # TODO: decouple from etcd (for supporting etcd on another node)
  cat <<EOF | x u7s-master.target
[Unit]
Description=Usernetes target for Kubernetes master components
Requires=u7s-kube-apiserver.service u7s-kube-controller-manager.service u7s-kube-scheduler.service
After=u7s-kube-apiserver.service u7s-kube-controller-manager.service u7s-kube-scheduler.service
PartOf=u7s-master-with-etcd.target

[Install]
WantedBy=u7s-master-with-etcd.target
EOF

  cat <<EOF | x u7s-kube-apiserver.service
[Unit]
Description=Usernetes kube-apiserver service
BindsTo=u7s-rootlesskit.service
Requires=u7s-etcd.service
After=u7s-etcd.service
PartOf=u7s-master.target

[Service]
Type=notify
NotifyAccess=all
ExecStart=${BASE}/boot/kube-apiserver.sh
${service_common}
EOF

  cat <<EOF | x u7s-kube-controller-manager.service
[Unit]
Description=Usernetes kube-controller-manager service
BindsTo=u7s-rootlesskit.service
Requires=u7s-kube-apiserver.service
After=u7s-kube-apiserver.service
PartOf=u7s-master.target

[Service]
ExecStart=${BASE}/boot/kube-controller-manager.sh
${service_common}
EOF

  cat <<EOF | x u7s-kube-scheduler.service
[Unit]
Description=Usernetes kube-scheduler service
BindsTo=u7s-rootlesskit.service
Requires=u7s-kube-apiserver.service
After=u7s-kube-apiserver.service
PartOf=u7s-master.target

[Service]
ExecStart=${BASE}/boot/kube-scheduler.sh
${service_common}
EOF

  ### node
  if [ -n "crio" ]; then
    cat <<EOF | x u7s-node.target
[Unit]
Description=Usernetes target for Kubernetes node components (crio)
Requires=u7s-kubelet-crio.service u7s-kube-proxy.service $([ "$CNI" = "flannel" ] && echo u7s-flanneld.service)
After=u7s-kubelet-crio.service u7s-kube-proxy.service $([ "$CNI" = "flannel" ] && echo u7s-flanneld.service)
PartOf=u7s.target

[Install]
WantedBy=u7s.target
EOF

    cat <<EOF | x u7s-kubelet-crio.service
[Unit]
Description=Usernetes kubelet service (crio)
BindsTo=u7s-rootlesskit.service
PartOf=u7s-node.target

[Service]
Type=notify
NotifyAccess=all
ExecStart=${BASE}/boot/kubelet-crio.sh
${service_common}
EOF

    cat <<EOF | x u7s-kube-proxy.service
[Unit]
Description=Usernetes kube-proxy service
BindsTo=u7s-rootlesskit.service
Requires=u7s-kubelet-crio.service
After=u7s-kubelet-crio.service
PartOf=u7s-node.target

[Service]
ExecStart=${BASE}/boot/kube-proxy.sh
${service_common}
EOF

    if [ "$CNI" = "flannel" ]; then
      cat <<EOF | x u7s-flanneld.service
[Unit]
Description=Usernetes flanneld service
BindsTo=u7s-rootlesskit.service
PartOf=u7s-node.target

[Service]
ExecStart=${BASE}/boot/flanneld.sh
${service_common}
EOF
    fi
  fi
}
